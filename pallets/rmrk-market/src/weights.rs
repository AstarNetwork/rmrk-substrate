
//! Autogenerated weights for `pallet_rmrk_market`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-14, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `Sergejs-MacBook-Air.local`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/rmrk-substrate
// benchmark
// pallet
// --chain
// dev
// --execution=wasm
// --wasm-execution=compiled
// --pallet
// pallet_rmrk_market
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --output
// pallets/rmrk-market/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_rmrk_market.
pub trait WeightInfo {
	fn buy() -> Weight;
	fn list() -> Weight;
	fn unlist() -> Weight;
	fn make_offer() -> Weight;
	fn withdraw_offer() -> Weight;
	fn accept_offer() -> Weight;
}

/// Weight functions for `pallet_rmrk_core`.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: RmrkMarket ListedNfts (r:1 w:1)
	// Storage: RmrkCore Lock (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: Uniques Account (r:0 w:2)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	fn buy() -> Weight {
		Weight::from_ref_time(63_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
	}
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Nfts (r:1 w:0)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:1)
	// Storage: RmrkMarket ListedNfts (r:0 w:1)
	fn list() -> Weight {
		Weight::from_ref_time(26_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: RmrkMarket ListedNfts (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkCore Lock (r:1 w:1)
	fn unlist() -> Weight {
		Weight::from_ref_time(23_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: Uniques Asset (r:1 w:0)
	// Storage: RmrkMarket Offers (r:1 w:1)
	fn make_offer() -> Weight {
		Weight::from_ref_time(28_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: RmrkMarket Offers (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:0)
	fn withdraw_offer() -> Weight {
		Weight::from_ref_time(28_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: RmrkMarket Offers (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: RmrkCore Lock (r:1 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: Uniques Class (r:1 w:0)
	// Storage: Uniques Account (r:0 w:2)
	// Storage: Uniques ItemPriceOf (r:0 w:1)
	fn accept_offer() -> Weight {
		Weight::from_ref_time(74_000_000 as u64)
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
	}
}
